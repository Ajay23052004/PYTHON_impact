type()

istance()

#list
-list is ordered collection of elements
-any type of data we can store in list
#slicing operator[:]

  -slicing operator is used to 
#tuple


#1/1/2024-Monday

#functions



def greet (msg="good morning",name) ==> it will give eeror bcause 

# arbitary Arguments(multiple arguments)

def fun(*names):
    for name in names:
        print("hello",name)
    
x=10
fun("ajay","vijay","jaydeep")


#################################Questions##########################
:program to display calender.
:display fubonacci sequence Using Recursion.
:Find sum of natural number using recursion.
:convert decimal to binary using recursion.
:Add two matrices.
:Transpose a matrix.
:Multiply two matrices.
:check whether a string is palindrome or not.
:Remove punctuation from string.


#--------------------------Date:05-01-2024-------------------------------#

##class: classis a blueprint for the object.
##object: object is an instance of a class.

give example of class in java with input output with code?
class student{
    String name;
    int age;
    String gender;
    int rollno;
    void display(){
        System.out.println("name:"+name);
        System.out.println("age:"+age);
        System.out.println("gender:"+gender);
        System.out.println("rollno:"+rollno);
    }
}
public class student1
{
    public static void main(String args[])
    {
        student s1=new student();
        s1.name="ajay";
        s1.age=20;
        s1.gender="male";
        s1.rollno=101;
        s1.display();
    }
}
give example of class in python with input output with code?
class student:
    def __init__(self, name, age, gender, rollno):
        self.name = name
        self.age = age
        self.gender = gender
        self.rollno = rollno
    def display(self):
        print("Name:", self.name)
        print("Age:", self.age)
        print("Gender:", self.gender)
        print("Roll No:", self.rollno)

# Create an object of the Student class
student1 = student("John", 20, "Male", 1001)
# Call the display method on the student1 object
student1.display()

inheritancen defination in python with example
class Parent:
    def __init__(self, name):
        self.name = name
    def showName(self):
        print("Parent's name is", self.name)

class Child(Parent):
    def __init__(self, name, age):
        Parent.__init__(self, name)
        self.age = age
    def showAge(self):
        print("Child's age is", self.age)

# Create an object of the Child class
child1 = Child("Alice", 10)
child1.showName()
child1.showAge()
Output:
Parent's name is Alice
Child's age is 10
Encapsulation definition and example in Python
class Student:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def display(self):
        print("Name:", self.name)
        print("Age:", self.age)

student1 = Student("John", 20)
student1.display()
Output:
Name: John
Age: 20
Abstraction definition and example in Python
from abc import ABC, abstractmethod
class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class
class Rectangle(Shape):
    def __init__(self, length, width):
        self.length = length
        self.width = width
    def area(self):
        return self.length * self.width

rectangle = Rectangle(5, 3)
print(rectangle.area())  # Output: 15
Inheritance definition and example in Python
class Animal:
    def __init__(self, name):
        self.name

    def speak(self):
        print("Animal speaks")

class Dog(Animal):
    def speak
        print("Dog barks")

dog = Dog("Max")
dog.speak()  # Output: Dog barks
Polymorphism definition and example in Python
def add(x, y):
    return x + y

def add(a, b, c):
    return a + b + c

print(add(1, 2))  # Output: 3
print(add(1, 2, 3))  # Output: 6


object oriented programing defination?
In object-oriented programming, polymorphism refers to the ability of a variable, function, or object to take on multiple forms. This allows for greater flexibility
4 pllers of object oriented programing?
1. Encapsulation
2. Inheritance
3. Polymorphism
4. Abstraction
Encapsulation is one of the four core principles of Object-Oriented Programming 
access specifiers in python?
public, protected, and private are three access specifiers in Python.
public: The public access specifier allows the member to be accessed from anywhere within the program.
protected: The protected access specifier allows the member to be accessed from within the class and its subclasses.
private: The private access specifier restricts the member to be accessed only from within the class.
protected: The protected access modifier combines the features of both public and private access modifiers.
It can be accessed by the members of the same class as well as derived classes (subclasses).
private: The private access modifier restricts the member to be accessed only from within the class.
Access Modifiers Example
class Person:
    def __init__(self, name, age):
        self.name = name
        self._age = age
    
    def display(self):
        print(f"Name: {self.name}, Age: {self._age}")

# Creating an object of Person class
person = Person("John", 30)

# Accessing public attribute
print(person.name)

# Accessing protected attribute through a method
person.display()

# Trying to access private attribute
try:
    print(person._age)
except AttributeError:
    print("Cannot access private attribute directly.")

# Trying to modify private attribute
person._age = 35
print(person._age)  # This will give an error



ex ..
_modifier == protected(_)
__modifier == private(__)
modifier = public()


#polymorephism
A polymorphic class is one that can take on many forms. It means that objects of different
types can be substituted for each other.


#abstraction
A class is considered abstract if it contains one or more abstract methods.
An abstract method is a method that has a declaration but does not have an implementation.
An abstract class must also be declared abstract using the abstract keyword.


#encapsulation
Encapsulation is the process of wrapping data and functions that manipulate that data into a single unit, 
the class.


#inheritance
In object-oriented programming, inheritance is a feature that allows one class to inherit the properties and methods from another class.
Inheritance allows us to create new classes based on existing ones by inheriting their properties and methods
#polymorphism
In object-oriented programming, polymorphism is a feature that allows you to perform the same action in different ways.
Polymorphism allows values of different types to be treated as values of another type. The term comes
from the Greek words poly and morphs, meaning "many forms."
#method overriding vs method hiding
In object-oriented programming, method overriding and method hiding are two different ways to implement polymorphism.
Both allow you to define a method with the same name in a subclass, but they have different semantics.
Method overriding is when a subclass defines a method with the same name and signature as a method in its superclass.
Method hiding is when a subclass defines a method with the same name and signature as a method in its superclass, but with a different implementation.
#abstraction
In object-oriented programming, abstraction is the process of hiding the implementation details and showing only the essential features to the user.
It allows users to focus on the functionality provided by the class, rather than the details of how it is implemented.
#encapsulation
In object-oriented programming, encapsulation is the process of wrapping data and functions that operate on that data into a single unit, called a class.
This prevents other parts of the code from directly accessing and modifying the data, and ensures that the data remains consistent and secure.
#inheritance
In object-oriented programming, inheritance allows one class to inherit the properties and methods of another class.
Subclasses can add their own properties and methods, and override methods from the superclass.



#--------------------------Date:06-01-2024-------------------------------#







